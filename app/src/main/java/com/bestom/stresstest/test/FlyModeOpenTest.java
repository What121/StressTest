package com.bestom.stresstest.test;

import android.annotation.SuppressLint;
import android.app.ActivityManager;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.bestom.stresstest.R;

import java.util.Timer;
import java.util.TimerTask;

//import android.os.UserHandle;

public class FlyModeOpenTest extends StressBase {
	public final static String TAG = "FlyModeOpenTest";

	private Timer mTimer;
	private TextView mMaxView;
	private TextView mTestTimeTv;
	
	private int mAutoTestFlag = 0;
	private WakeLock mWakeLock;

	@SuppressLint({"InvalidWakeLockTag", "WrongConstant"})
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_flymode_open_test);
		setDefaultBtnId(R.id.start_btn, R.id.stop_btn, R.id.exit_btn,
				R.id.maxtime_btn);
		mMaxView = (TextView) findViewById(R.id.maxtime_tv);
		mTestTimeTv = (TextView) findViewById(R.id.testtime_tv);
		
		mWakeLock = ((PowerManager)getSystemService("power")).newWakeLock(PowerManager.FULL_WAKE_LOCK, TAG);
		mWakeLock.acquire();
		
		initData();
		updateMaxTV();
		if (mAutoTestFlag != 0) {
			startTest();
		}
	}

	private void initData() {
		mAutoTestFlag = getIntent().getIntExtra("auto", 0);
		mMaxTestCount = getIntent().getIntExtra("max", 0);
	}

	@Override
	public void onStartClick() {
		mCurrentCount = 0;
		mTestTimeTv.setVisibility(View.INVISIBLE);
		startTest();
	}

	@Override
	public void onStopClick() {
		stopTest();
	}

	@Override
	public void onSetMaxClick() {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void updateMaxTV() {
		super.updateMaxTV();
		mMaxView.setText(getString(R.string.flymode_maxtime) + mMaxTestCount);
	}
	
	public void updateTestTimeTV() {
		mTestTimeTv.setText(getString(R.string.already_test_time)+mCurrentCount);
	}

	private void startTest() {
		isRunning = true;
		updateBtnState();
		mTimer = new Timer();
		mTimer.schedule(new TimerTask() {
			@Override
			public void run() {
				if (!isRunning || (mMaxTestCount != 0 && mCurrentCount >= mMaxTestCount)) {
					mHandler.sendEmptyMessage(0);
					mTimer.cancel();
					return;
				} else {
					if (isAirplaneModeOn() == false) {
						setAirplaneModeOn(true);
						Log.d(TAG, "********airplanemode is closed, try open airplanemode now!******");
					} else if (isAirplaneModeOn() == true) {
						setAirplaneModeOn(false);
						Log.d(TAG, "*******airplanemode is opened, try close airplanemode now!****");
						incCurCount();
					}
					mHandler.sendEmptyMessage(1);
				}

			}
		}, 500, 8000);
	}

	private void stopTest() {
		Log.d(TAG,"-----stopTest----now----");
		isRunning = false;
		updateBtnState();
		if (mTimer != null) 
			mTimer.cancel();
	}

    public boolean isAirplaneModeOn() {
        return Settings.Global.getInt(getContentResolver(),
                Settings.Global.AIRPLANE_MODE_ON, 0) != 0;
    }

    private void setAirplaneModeOn(boolean enabling) {
        // Change the system setting
    	if(isTesting()){
        Settings.Global.putInt(getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,enabling ? 1 : 0);
        Log.d(TAG,"-----setAirplaneModeOn----sendBroadcast----");
        // Post the intent
        Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);
        intent.putExtra("state", enabling);
//        sendBroadcastAsUser(intent, UserHandle.ALL);
	     sendBroadcast(intent);
    	}else{
    		stopTest();
    	}
    }
    
    private String getRunningActivity() {
		ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
		String name = manager.getRunningTasks(2).get(0).topActivity.getClassName();
		Log.e(TAG, "RUNNING: "+name);
		return name;
	}

	private Boolean isTesting(){
		String name = getRunningActivity();
		if (name.equals("com.bestom.stresstest.test.FlyModeOpenTest")){
		    return true;
		}else
			return false;
	}
    
	private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0:
				stopTest();
				break;
			case 1:
				updateTestTimeTV();
				mTestTimeTv.setVisibility(View.VISIBLE);
				break;

			default:
				break;
			}
		};
	};
}
