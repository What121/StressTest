package com.bestom.stresstest.test;

import android.annotation.SuppressLint;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.bestom.stresstest.R;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

public class WifiOpenTest extends StressBase {
	public final static String TAG = "WifiOpenTest";
	
	private TextView mMaxView;
	private TextView mTestTimeTv;
	
	private WifiManager mWifiManager;
	private Timer mTimer; 
	private WakeLock mWakeLock;
	
	private int mAutoTestFlag = 0;
	
	private String mPingIpAddrResult = null;
	private String mIpAddress = null;
	
	@SuppressLint({"WifiManagerLeak", "InvalidWakeLockTag", "WrongConstant"})
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_wifi_open_test);
		setDefaultBtnId(R.id.start_btn, R.id.stop_btn, R.id.exit_btn,
				R.id.maxtime_btn);
		mWifiManager = (WifiManager) getSystemService(WIFI_SERVICE);
		mMaxView = (TextView) findViewById(R.id.maxtime_tv);
		mTestTimeTv = (TextView) findViewById(R.id.testtime_tv);
		mWakeLock = ((PowerManager)getSystemService("power")).newWakeLock(PowerManager.FULL_WAKE_LOCK, "wifitest");
		mWakeLock.acquire();
		initData();
		updateMaxTV();
		if (mAutoTestFlag != 0) {
			startTest();
		}
	}
	
	private void initData() { 
		mAutoTestFlag = getIntent().getIntExtra("auto", 0);
		mMaxTestCount = getIntent().getIntExtra("max", 0);
	}
	

	@Override
	public void onStartClick() {
		mCurrentCount = 0;
		mTestTimeTv.setVisibility(View.INVISIBLE);
		startTest();
	}

	@Override
	public void onStopClick() {
		stopTest();
	}

	@Override
	public void onSetMaxClick() {
		
	}
	
	@Override
	public void updateMaxTV() {
		super.updateMaxTV();
		mMaxView.setText(getString(R.string.wifi_maxtime)+mMaxTestCount);
	}
	
	public void updateTestTimeTV() {
		mTestTimeTv.setText(getString(R.string.already_test_time)+mCurrentCount);
	}
	
	public void startTest() {
		isRunning = true;
		updateBtnState();
		mTimer = new Timer();
		mTimer.schedule(new TimerTask() {
			@SuppressLint("MissingPermission")
			@Override
			public void run() {
				if (!isRunning || (mMaxTestCount != 0 && mCurrentCount >= mMaxTestCount)) {
					mHandler.sendEmptyMessage(0);
					mTimer.cancel();
					return;
				} else {
					if(mWifiManager.getWifiState() == mWifiManager.WIFI_STATE_DISABLED){
						mWifiManager.setWifiEnabled(true);
						Log.d(TAG, "*********wifistate is closed, try open wifi now!*****");
					}else if(mWifiManager.getWifiState() == mWifiManager.WIFI_STATE_ENABLED){
						mWifiManager.setWifiEnabled(false);
						Log.d(TAG, "*********wifistate is opened, try close wifi now!******");
						incCurCount();
					}
					mHandler.sendEmptyMessage(1);
				}
				
			}
		}, 2000, 8000);
	}

	public void stopTest() {
		isRunning = false;
		updateBtnState();
		if (mTimer != null)
			mTimer.cancel();
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		stopTest();
		mWakeLock.release();
	}
	
	@SuppressLint("HandlerLeak")
	private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0:
				stopTest();
				break;
			case 1:
				updateTestTimeTV();
				mTestTimeTv.setVisibility(View.VISIBLE);
				break;

			default:
				break;
			}
		};
	};
	
	private final void pingIpAddr() {
        try {
            // TODO: Hardcoded for now, make it UI configurable
            Process p = Runtime.getRuntime().exec("ping -c 1 -w 100 " + mIpAddress);
            int status = p.waitFor();
            if (status == 0) {
                mPingIpAddrResult = "Pass";
            } else {
                mPingIpAddrResult = "Fail: IP addr not reachable";
            }
        } catch (IOException e) {
            mPingIpAddrResult = "Fail: IOException";
        } catch (InterruptedException e) {
            mPingIpAddrResult = "Fail: InterruptedException";
        }
    }
	
}
