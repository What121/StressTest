package com.bestom.stresstest.test;

import android.annotation.SuppressLint;
import android.bluetooth.BluetoothAdapter;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.bestom.stresstest.R;

import java.util.Timer;
import java.util.TimerTask;

public class BluetoothOpenTest extends StressBase {
	public final static String TAG = "BTOpenTest";
	private BluetoothAdapter mBTManager;

	private Timer mTimer;
	private TextView mMaxView;
	private TextView mTestTimeTv;
	
	private int mAutoTestFlag = 0;
	private WakeLock mWakeLock;

	@SuppressLint({"InvalidWakeLockTag", "WrongConstant"})
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_bt_open_test);
		setDefaultBtnId(R.id.start_btn, R.id.stop_btn, R.id.exit_btn,
				R.id.maxtime_btn);

		mBTManager = BluetoothAdapter.getDefaultAdapter();
		mMaxView = (TextView) findViewById(R.id.maxtime_tv);
		mTestTimeTv = (TextView) findViewById(R.id.testtime_tv);
		
		mWakeLock = ((PowerManager)getSystemService("power")).newWakeLock(PowerManager.FULL_WAKE_LOCK, TAG);
		mWakeLock.acquire();
		initData();
		updateMaxTV();
		if (mAutoTestFlag != 0) {
			startTest();
		}
	}

	private void initData() {
		mAutoTestFlag = getIntent().getIntExtra("auto", 0);
		mMaxTestCount = getIntent().getIntExtra("max", 0);
	}

	@Override
	public void onStartClick() {
		if(mBTManager!=null){
		mCurrentCount = 0;
		mTestTimeTv.setVisibility(View.INVISIBLE);
		startTest();
		}else{
			Toast.makeText(this, "NO SUPPORT BLUETOOTH!", Toast.LENGTH_LONG).show();
		}
	}

	@Override
	public void onStopClick() {
		stopTest();
	}

	@Override
	public void onSetMaxClick() {

	}

	@Override
	public void updateMaxTV() {
		super.updateMaxTV();
		mMaxView.setText(getString(R.string.bt_maxtime) + mMaxTestCount);
	}
	
	public void updateTestTimeTV() {
		mTestTimeTv.setText(getString(R.string.already_test_time)+mCurrentCount);
	}

	private void startTest() {
		isRunning = true;
		updateBtnState();
		mTimer = new Timer();
		mTimer.schedule(new TimerTask() {
			@Override
			public void run() {
				if (!isRunning
						|| (mMaxTestCount != 0 && mCurrentCount >= mMaxTestCount)) {
					mHandler.sendEmptyMessage(0);
					mTimer.cancel();
					return;
				} else {
					if (mBTManager.getState() == mBTManager.STATE_OFF) {
						mBTManager.enable();
						Log.d(TAG,
								"*********bluetoothstate is closed, try open bluetooth now!*****");
					} else if (mBTManager.getState() == mBTManager.STATE_ON) {
						mBTManager.disable();
						Log.d(TAG,
								"*********bluetoothstate is opened, try close bluetooth now!*****");
						incCurCount();
					}
					mHandler.sendEmptyMessage(1);
				}

			}
		}, 500, 8000);
	}

	private void stopTest() {
		isRunning = false;
		updateBtnState();
		if (mTimer != null)
			mTimer.cancel();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		mWakeLock.release();
		stopTest();
	}
	
	private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0:
				stopTest();
				break;
			case 1:
				updateTestTimeTV();
				mTestTimeTv.setVisibility(View.VISIBLE);
				break;

			default:
				break;
			}
		};
	};

}
